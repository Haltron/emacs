#+TITLE:JTH's Emacs Config
#+AUTHOR: Joshua Travis Horton (JTH)
#+DESCRIPTION: JTH's personal Emacs config developed following DistroTube Configure Emacs Youtube Series in June 2024.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Content :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#zooming-inout][Zooming In/Out]]
- [[#buffer-move][Buffer Move]]
- [[#insert-blank-line][Insert Blank Line]]
- [[#graphical-changes][Graphical Changes]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#all-the-icons][ALL-THE-ICONS]]
  - [[#doom-modeline][Doom-Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#diminish][Diminish]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#transparency][Transparency]]
  - [[#graphical-user-interface-tweaks][Graphical User Interface Tweaks]]
- [[#sudo-edit][SUDO Edit]]
- [[#which-key][WHICH-KEY]]
- [[#ivy-and-counsel][Ivy and Counsel]]
- [[#company][Company]]
- [[#flycheck][Flycheck]]
- [[#app-launcher][App-Launcher]]
- [[#shells-and-terminals][Shell's and Terminals]]
  - [[#eshell][Eshell]]
- [[#file-managment][File Managment]]
  - [[#backup][BACKUP]]
  - [[#projectile][Projectile]]
  - [[#dired][DIRED]]
  - [[#neotree][Neotree]]
- [[#org-mode][ORG MODE]]
  - [[#org-bullets][ORG Bullets]]
  - [[#org-enable-table-of-contents][ORG Enable Table of Contents]]
  - [[#indetation-behavior][Indetation Behavior]]
  - [[#org-enable-tempo-for-shorthand-completion][ORG Enable Tempo for Shorthand Completion]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Elpaca Package Manager
Elpaca is a package manager for EMACS allowing for easy importation of add-ons and automatically handle the finle management
#+begin_src emacs-lisp
 (defvar elpaca-installer-version 0.7)
 (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
 (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
 (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
 (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                 :ref nil :depth 1
                                 :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                 :build (:not elpaca--activate-package)))
 (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
     (add-to-list 'load-path (if (file-exists-p build) build repo))
     (unless (file-exists-p repo)
     (make-directory repo t)
     (when (< emacs-major-version 28) (require 'subr-x))
     (condition-case-unless-debug err
         (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
             (progn (message "%s" (buffer-string)) (kill-buffer buffer))
             (error "%s" (with-current-buffer buffer (buffer-string))))
         ((error) (warn "%s" err) (delete-directory repo 'recursive))))
     (unless (require 'elpaca-autoloads nil t)
     (require 'elpaca)
     (elpaca-generate-autoloads "elpaca" repo)
     (load "./elpaca-autoloads")))
 (add-hook 'after-init-hook #'elpaca-process-queues)
 (elpaca `(,@elpaca-order))
#+end_src

** Load Evil Mode
This implement evil mode which is a package to bring VIM like keybindings and behavior to EMACS
#+begin_src emacs-lisp
 ;; Install a package via the elpaca macro
 ;; See the "recipes" section of the manual for more details.
 ;; (elpaca example-package)
 ;; Install use-package support
 (elpaca elpaca-use-package
     ;; Enable use-package :ensure support for Elpaca.
     (elpaca-use-package-mode)
     ;; Assuem :elpaca t unless otherwise specified.
     (setq elpaca-use-package-by-default t))

 ;;When installing a package which modifies a form used at the top-level
 ;;(e.g. a package which adds a use-package key word),
 ;;use the :wait recipe keyword to block until that package has been installed/configured.
 ;;For example:
 ;;(use-package general :ensure (:wait t) :demand t)

 ;; Expands to: (elpaca evil (use-package evil :demand t))
 (use-package evil
     :init ;;tweak evils's config before loading
     (setq evil-want-integration t) ;; optional since it's already true
     (setq evil-want-keybinding nil)
     (setq evil-vsplit-window-right t)
     (setq evil-split-window-below t)
     (setq evil-want-C-i-jump nil) ;;added to enable tab cycling in org mode found via internet search
     (evil-mode))
 (use-package evil-collection
     :after evil
     :config
     (setq evil-collection-mode-list '(dashboard dired ibuffer))
     (evil-collection-init))
 (use-package evil-tutor)

 ;;Turns off elpaca-use-package-mode current declaration
 ;;Note this will cause the declaration to be interpreted immediately (not deferred).
 ;;Useful for configuring built-in emacs features.
 (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

** General Keybindings
General is a package use to define custom user key bindings. DT uses this feature extensively to create DOOM like behaviors such as using SPC for meta. 
#+begin_src emacs-lisp
 (use-package general
     :config
     (general-evil-setup)

 ;; set up 'SPC' as the global leader key
 (general-create-definer jth/leader-keys
     :states '(normal insert visual emacs)
     :keymaps 'override
     :prefix "SPC" ;; set leader
     :global-prefix "M-SPC") ;; access leader in insert mode

 (jth/leader-keys
     "SPC" '(counsel-M-x :wk "Counsel M-x")
     "." '(find-file :wk "Find file")
     "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
     "f r" '(counsel-recentf :wk "Find recent files")
     "TAB TAB" '(comment-line :wk "Comment lines"))

 ;;Changed kill buffer line from DT setup due to error with kill-this-buffer. Pulled lamba function from definition via stackexchange
 (jth/leader-keys
     "b" '(:ignore t :wk "buffer")
     "b b" '(switch-to-buffer :wk "Switch buffer")
     "b i" '(ibuffer :wk "Ibuffer")
     "b k" '(lambda () (interactive) (kill-buffer (current-buffer)) :wk "Kill this buffer")
     "b n" '(next-buffer :wk "Next buffer")
     "b p" '(previous-buffer :wk "Previous buffer")
     "b r" '(revert-buffer :wk "Reload buffer"))

 ;;Keybindings for Dired movement provided by DT setup series
 (jth/leader-keys
     "d" '(:ignore t :wk "Dired")
     "d d" '(dired :wk "Open dired")
     "d j" '(dired-jump :wk "Dired jump to current")
     "d n" '(neotree-dir :wk "Open directory in neotree")
     "d p" '(peep-dired :wk "Peep-dired"))

 ;;Keybindings to evaluate lisp in various options 
 (jth/leader-keys
     "e" '(:ignore t :wk "Evaluate")    
     "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
     "e d" '(eval-defun :wk "Evaluate defun containing or after point")
     "e e" '(eval-expression :wk "Evaluate and elisp expression")
     "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
     "e r" '(eval-region :wk "Evaluate elisp in region")) 

 ;;Adding section for all shell key bindings instead of adding to eval.
 (jth/leader-keys
     "s" '(:ignore t :wk "Shell")
     "s e" '(eshell :wk "Load Eshell"))

 ;;Help bindings to define func/var or to "hot reload" emacs config after savings (has issues). Changed config reload to "SPC h r c" for "help reload config" in my mind.
 (jth/leader-keys
     "h" '(:ignore t :wk "Help")
     "h f" '(describe-function :wk "Describe function")
     "h v" '(describe-variable :wk "Describe variable")
     "h r c" '((lambda () (interactive)
       (load-file "~/.config/emacs/init.el")
       (ignore (elpaca-process-queues)))
       :wk "Reload emacs config"))

 ;;Org Mode Keybindings. Put in DT's setup until I develop my own opinions/needs.
 (jth/leader-keys
     "m" '(:ignore t :wk "Org")
     "m a" '(org-agenda :wk "Org agenda")
     "m e" '(org-export-dispatch :wk "Org export dispatch")
     "m i" '(org-toggle-item :wk "Org toggle item")
     "m t" '(org-todo :wk "Org todo")
     "m B" '(org-babel-tangle :wk "Org babel tangle")
     "m T" '(org-todo-list :wk "Org todo list"))

 (jth/leader-keys
     "m b" '(:ignore t :wk "Tables")
     "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

 (jth/leader-keys
     "m d" '(:ignore t :wk "Date/deadline")
     "m d t" '(org-time-stamp :wk "Org time stamp"))

 ;;Projectile keymap added per DT config
 (jth/leader-keys
     "p" '(projectile-command-map :wk "Projectile"))

 ;;Keyboard shortcuts act as toggle for certain functions/items
 (jth/leader-keys
     "t" '(:ignore t :wk "Toggle")
     "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
     "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
     "t t" '(visual-line-mode :wk "Toggle truncated lines")
     "t r" '(rainbow-delimiters-mode :wk "Toggle Rainbow-Delimiters"))

 ;;Keyboard shortcuts to inset blank line above and below using custom functions grabbed from stack exchange. Matche to "o" and "O" for easy of remembering.
 (jth/leader-keys
     "o" '(insert-line-below :wk "Line Below Cursor"))
 (jth/leader-keys
     "O" '(insert-line-above :wk "Line Above Cursor"))

 ;;Keyboard short cuts to act as VIM window controls via defined functions from DT.
 (jth/leader-keys
     "w" '(:ignore t :wk "Windows")
     ;; Window splits
     "w c" '(evil-window-delete :wk "Close window")
     "w n" '(evil-window-new :wk "New window")
     "w s" '(evil-window-split :wk "Horizontal split window")
     "w v" '(evil-window-vsplit :wk "Vertical split window")
     ;; Window motions
     "w h" '(evil-window-left :wk "Window left")
     "w j" '(evil-window-down :wk "Window down")
     "w k" '(evil-window-up :wk "Window up")
     "w l" '(evil-window-right :wk "Window right")
     "w w" '(evil-window-next :wk "Goto next window")
     ;; Move Windows
     "w H" '(buf-move-left :wk "Buffer move left")
     "w J" '(buf-move-down :wk "Buffer move down")
     "w K" '(buf-move-up :wk "Buffer move up")
     "w L" '(buf-move-right :wk "Buffer move right"))
 )
#+end_src

* Zooming In/Out
Adding text-scale-adjust as well as shortcuts on DT's config
#+begin_src emacs-lisp
 (global-set-key (kbd "C-=") 'text-scale-increase)
 (global-set-key (kbd "C--") 'text-scale-decrease)
 (global-set-key (kbd "C-0") 'text-scale-adjust)
 (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
 (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src


* Buffer Move
This is function found/created by DT to bring VIM window behavior to Emacs. Allowing windows to be swap via key bindings in Gernal section tied to the functiond defined below.
#+begin_src emacs-lisp
 (require 'windmove)

 ;;;###autoload
 (defun buf-move-up ()
   "Swap the current buffer and the buffer above the split.
 If there is no split, ie now window above the current one, an
 error is signaled."
 ;;  "Switches between the current buffer, and the buffer above the
 ;;  split, if possible."
   (interactive)
   (let* ((other-win (windmove-find-other-window 'up))
          (buf-this-buf (window-buffer (selected-window))))
     (if (null other-win)
         (error "No window above this one")
       ;; swap top with this one
       (set-window-buffer (selected-window) (window-buffer other-win))
       ;; move this one to top
       (set-window-buffer other-win buf-this-buf)
       (select-window other-win))))

 ;;;###autoload
 (defun buf-move-down ()
 "Swap the current buffer and the buffer under the split.
 If there is no split, ie now window under the current one, an
 error is signaled."
   (interactive)
   (let* ((other-win (windmove-find-other-window 'down))
          (buf-this-buf (window-buffer (selected-window))))
     (if (or (null other-win) 
             (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
         (error "No window under this one")
       ;; swap top with this one
       (set-window-buffer (selected-window) (window-buffer other-win))
       ;; move this one to top
       (set-window-buffer other-win buf-this-buf)
       (select-window other-win))))

 ;;;###autoload
 (defun buf-move-left ()
 "Swap the current buffer and the buffer on the left of the split.
 If there is no split, ie now window on the left of the current
 one, an error is signaled."
   (interactive)
   (let* ((other-win (windmove-find-other-window 'left))
          (buf-this-buf (window-buffer (selected-window))))
     (if (null other-win)
         (error "No left split")
       ;; swap top with this one
       (set-window-buffer (selected-window) (window-buffer other-win))
       ;; move this one to top
       (set-window-buffer other-win buf-this-buf)
       (select-window other-win))))

 ;;;###autoload
 (defun buf-move-right ()
 "Swap the current buffer and the buffer on the right of the split.
 If there is no split, ie now window on the right of the current
 one, an error is signaled."
   (interactive)
   (let* ((other-win (windmove-find-other-window 'right))
          (buf-this-buf (window-buffer (selected-window))))
     (if (null other-win)
         (error "No right split")
       ;; swap top with this one
       (set-window-buffer (selected-window) (window-buffer other-win))
       ;; move this one to top
       (set-window-buffer other-win buf-this-buf)
       (select-window other-win))))
#+end_src

* Insert Blank Line
#+begin_src emacs-lisp
 (defun insert-line-below ()
   "Insert an empty line below the current line."
   (interactive)
   (save-excursion
     (end-of-line)
     (open-line 1)))

 (defun insert-line-above ()
   "Insert an empty line above the current line."
   (interactive)
   (save-excursion
     (end-of-line 0)
     (open-line 1)))
#+end_src

* Graphical Changes

** Nerd Icons
Requires installation of nerd font/icons to the unit. For linux use the following: cd ~/.local/share/fonts && curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/DroidSansMNerdFont-Regular.otf
#+begin_src emacs-lisp
 (use-package nerd-icons
   :ensure (nerd-icons
              :type git
              :host github
              :repo "rainstormstudio/nerd-icons.el"
              :files (:defaults "data"))
 )

 (use-package nerd-icons-dired
   :hook
   (dired-mode . nerd-icons-dired-mode))
#+end_src

** ALL-THE-ICONS
Requires the command M-x all-the-icons-install-fonts to be executed in order for the fonts to be available
All-The-Icons needed for Neotree. Other packages have been moved to Nerd-Icons for now.
#+begin_src emacs-lisp
 (use-package all-the-icons
   :if (display-graphic-p))
#+end_src

** Doom-Modeline
#+begin_src emacs-lisp
 (use-package doom-modeline
     :ensure t
     :init (doom-modeline-mode 1))
#+end_src

** Dashboard
Dashboard setup provided by DT from youtube series on emac config. 
#+begin_src emacs-lisp
 (use-package dashboard
     :ensure t 
     :init
     (setq initial-buffer-choice 'dashboard-open)
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
     ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
     (setq dashboard-startup-banner "/home/halman/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
     (setq dashboard-center-content t) ;; set to 't' for centered content
     (setq dashboard-vertically-center-content t)
     (setq dashboard-items '((recents . 5)
                             (agenda . 5 )
                             (bookmarks . 3)
                             (projects . 3)
                             (registers . 3)))
     :custom
     (dashboard-modify-heading-icons '((recents . "file-text")
                                         (bookmarks . "book")))
     :config
     (dashboard-setup-startup-hook))
#+end_src

** Diminish
#+begin_src emacs-lisp
 (use-package diminish :ensure t)
#+end_src

** Theme
This loades in Doom EMACS theme. Excerpt below is from DOOM EMACS github. Custom setup possible but to be looked into at a later date.
#+begin_src emacs-lisp
 ;;Using doom theme with snippet from their github below instead of custom theme to start with.
 (use-package doom-themes
   :ensure t
   :config
 ;; Global settings (defaults)
 (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
     doom-themes-enable-italic t) ; if nil, italics is universally disabled
 (load-theme 'doom-dark+ t)
 ;; Enable flashing mode-line on errors
 (doom-themes-visual-bell-config)
 ;; Enable custom neotree theme (all-the-icons must be installed!)
 (doom-themes-neotree-config)
 ;; or for treemacs users
 (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
 (doom-themes-treemacs-config)
 ;; Corrects (and improves) org-mode's native fontification.
 (doom-themes-org-config))
#+end_src

** Font
This is the recommended font setup from DT and seems to be find at initial review
#+begin_src emacs-lisp
 ;;This requires the installation of JetBrians Font to system. Added to linux via : /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/JetBrains/JetBrainsMono/master/install_manual.sh)"
 (set-face-attribute 'default nil
     :font "JetBrains Mono"
     :height 110
     :weight 'medium)
 (set-face-attribute 'variable-pitch nil
     :font "Ubuntu"
     :height 120
     :weight 'medium)
 (set-face-attribute 'fixed-pitch nil
     :font "JetBrains Mono"
     :height 110
     :weight 'medium)
 ;; Makes commented text and keywords italics.
 ;; This is working in emacsclient but not emacs.
 ;; Your font must have an italic face available.
 (set-face-attribute 'font-lock-comment-face nil
     :slant 'italic)
 (set-face-attribute 'font-lock-keyword-face nil
     :slant 'italic)

 ;; This sets the default font on all graphical frames created after restarting Emacs.
 ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
 ;; are not right unless I also add this method of setting the default font.
 (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

 ;; Uncomment the following line if line spacing needs adjusting.
 ;;(setq-default line-spacing 0.06)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
 (use-package rainbow-delimiters)
#+end_src

** Transparency
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha-background 92)
  (add-to-list 'default-frame-alist '(alpha-background . 92)) ; For all new frames henceforth
#+end_src

** Graphical User Interface Tweaks

*** Disable Menubar, Toolbar, and Scrollbars
Removes toolbar and other GUI items that are not needed with proper setup/use.
#+begin_src emacs-lisp
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
#+end_src

*** Dispay Line Numbers and Truncated Lines
Kept visual line mode true for global but commented out global line numbers. Toggle key binding sufficient if line numbers needed. Looks cleaner this way. 
#+begin_src emacs-lisp
  ;; (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* SUDO Edit
#+begin_src emacs-lisp
 (use-package sudo-edit
 :config
 (jth/leader-keys
     "fu" '(sudo-edit-find-file :wk "Sudo find file")
     "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* WHICH-KEY
Allows EMACS to provided info on current control input and suggest completion options based on what is currently known by EMACS 
#+begin_src emacs-lisp
  (use-package which-key
  :init
      (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'right
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 0
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-width 0.45
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))
#+end_src

* Ivy and Counsel
#+begin_src emacs-lisp
  (use-package counsel
      :after ivy
      :diminish
      :config (counsel-mode))

  (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
	  ("C-x B" . ivy-switch-buffer-other-window))
      :diminish
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package nerd-icons-ivy-rich
	:ensure t
	:init
	(nerd-icons-ivy-rich-mode 1)
	(ivy-rich-mode 1))

    (use-package ivy-rich
	:after ivy
	:ensure t
	:init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
	:custom
	(ivy-virtual-abbreviate 'full
	ivy-rich-switch-buffer-align-virtual-buffer t
	ivy-rich-path-style 'abbrev)
	:config
	(ivy-set-display-transformer 'ivy-switch-buffer
				      'ivy-rich-switch-buffer-transformer))
#+end_src

* Company
#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :defer t
    :init (global-flycheck-mode))
#+end_src

* App-Launcher
Not adding the app launcher function as it is just outside of my use case I as don't like running emacs as a client right now.
#+begin_src emacs-lisp
  (use-package app-launcher
    :ensure '(app-launcher :host github :repo "SebastienWae/app-launcher"))
#+end_src

* Shell's and Terminals
DT also has vterm loaded but for my purposes I don't think it is worth it at this time. Built into emacs is eshell, shell, and term. Right now eshell seems to be the speed of what I am after without issue of configuring vterm.

** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.
  
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* File Managment

** BACKUP
By default, Emacs creates automatic backups of files in their original directories, such “file.el” and the backup “file.el~”.  This leads to a lot of clutter, so let’s tell Emacs to put all backups that it creates in the TRASH directory.
#+begin_src emacs-lisp
    (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

** Projectile
#+begin_src emacs-lisp
 (use-package projectile
   :diminish
   :config
   (projectile-mode 1))
#+end_src

** DIRED
#+begin_src emacs-lisp
 (use-package peep-dired
   :after dired
   :hook (evil-normalize-keymaps . peep-dired-hook)
   :config
     (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
     (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
     (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
     (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
 )
#+end_src

** Neotree
#+begin_src emacs-lisp
 (use-package neotree
   :config
   (setq neo-smart-open t
         neo-show-hidden-files t
         neo-window-width 55
         neo-window-fixed-size nil
         inhibit-compacting-font-caches t
         projectile-switch-project-action 'neotree-projectile-action) 
         ;; truncate long file names in neotree
         (add-hook 'neo-after-create-hook
            #'(lambda (_)
                (with-current-buffer (get-buffer neo-buffer-name)
                  (setq truncate-lines t)
                  (setq word-wrap nil)
                  (make-local-variable 'auto-hscroll-mode)
                  (setq auto-hscroll-mode nil)))))
#+end_src

* ORG MODE

** ORG Bullets
Implements good looking bullet rather than asterisks
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** ORG Enable Table of Contents
Allows for creations of Table of contents via ":toc:"
#+begin_src emacs-lisp
  (use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Indetation Behavior
Recommended by DT to remove weird behavior with indentation in org mode. Also line for diminishing Org Indent Mode
#+begin_src emacs-lisp
  (electric-indent-mode -1)
  (setq org-edit-src-content-indentation 1)
  (with-eval-after-load 'org-indent
    (require 'diminish)
    (diminish 'org-indent-mode))
#+end_src

** ORG Enable Tempo for Shorthand Completion
Allows for quick inserts of code blocks and etc. Info below:

<a  ’#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT
<c  ’#+BEGIN_CENTER’ … ‘#+END_CENTER’
<C  ’#+BEGIN_COMMENT’ … ‘#+END_COMMENT’
<e  ’#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’
<E  ’#+BEGIN_EXPORT’ … ‘#+END_EXPORT’
<h  ’#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’
<l  ’#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’
<q  ’#+BEGIN_QUOTE’ … ‘#+END_QUOTE’
<s  ’#+BEGIN_SRC’ … ‘#+END_SRC’
<v  ’#+BEGIN_VERSE’ … ‘#+END_VERSE’

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
